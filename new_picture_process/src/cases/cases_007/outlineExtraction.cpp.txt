#include "outlineExtraction.h"

// unsigned char * outlineExtraction::regionMark(unsigned char * bmp, int width, int height, int linebyte)
// {
// 	unsigned char * p = new unsigned char[height*linebyte];
// 	int label = 1;
// 	int *values = new int[height*width]{ 0 };
// 	std::vector<POINT> s;
// 	for ( i = 1; i < height - 1; i++)
// 	{
// 		for ( j = 1; j < width - 1; j++)
// 		{
// 			if (bmp[i*linebyte + j] == 255 && values[i*linebyte + j] == 0)
// 			{
// 				values[i*linebyte + j] = label;
// 				label++;
// 				POINT p;
// 				p.x = j;
// 				p.y = i;
// 				s.push_back(p);
// 				while (!s.empty())
// 				{

// 					POINT currPt = s.back();
// 					s.pop_back();
// 					origin.x = currPt.x;
// 					origin.y = currPt.y;
// 					for (i = 0; i < 8; i++)
// 					{
// 						p.x = currPt.x + dir[i][0];
// 						p.y = currPt.y + dir[i][1];
// 						if (p.x < 0 || p.y<0 || p.x > width - 1 || p.y>height - 1)
// 							continue;
// 						if (bmp[p.y * linebyte + p.x] == 255 && values[p.y * linebyte + p.x] == 0)
// 						{
// 							s.push_back(p);
// 							values[p.y * linebyte + p.x] = values[origin.y*linebyte + origin.x];
// 						}
// 					}
// 				}
// 			}
// 		}
// 	}
// 	/*int region = 1;
// 	int *values = new int[height*linebyte]{ 0 };
// 	std::vector<std::vector<int>> v;
// 	for ( i = height; i > 0; i--)
// 	{
// 		for ( j = 0; j < width; j++)
// 		{
// 			if (bmp[i*linebyte + j] == 255)
// 			{
// 				int cnt = 0;
// 				int value[4]{0};
// 				int left = bmp[i*linebyte + j - 1];
// 				int left_up = bmp[(i + 1)*linebyte + j - 1];
// 				int up = bmp[(i + 1)*linebyte + j];
// 				int right_up = bmp[(i + 1)*linebyte + j + 1];
// 				values[i*linebyte + j] = region;
// 				if (left == 255)
// 				{
// 					values[i*linebyte + j] = values[i*linebyte + j - 1];
// 					cnt++;
// 					value[0] = values[i*linebyte + j - 1];
// 				}
// 				if (left_up == 255)
// 				{
// 					values[i*linebyte + j] = values[(i + 1)*linebyte + j - 1];
// 					cnt++;
// 					value[1] = values[(i + 1)*linebyte + j - 1];
// 				}
// 				if (up == 255)
// 				{
// 					values[i*linebyte + j] = values[(i + 1)*linebyte + j];
// 					cnt++;
// 					value[2] = values[(i + 1)*linebyte + j];
// 				}
// 				if (right_up == 255)
// 				{
// 					values[i*linebyte + j] = values[(i + 1)*linebyte + j + 1];
// 					cnt++;
// 					value[3] = values[(i + 1)*linebyte + j + 1];
	
// 				}
// 				if (cnt > 1 )
// 				{
// 					std::vector<int> label;
// 					for (int k = 0; k < 4; k++)
// 					{
// 						if (value[k] != 0)
// 						{
// 							label.push_back(value[k]);
// 						}
// 					}
// 					v.push_back(label);
// 				}
// 				if (values[i*linebyte + j] == region)
// 					region++;
// 			}
			
// 		}
// 	}
// 	for ( i = 0; i < v.size(); i++)
// 	{
// 		std::vector<int> s = v.back();
// 		int min = 10000;
// 		for ( j = 0; j < s.size(); j++)
// 		{
// 			if (min > s[j])
// 			{
// 				min = s[j];
// 			}
// 		}
// 		for ( j = 0; j < height*linebyte; j++)
// 		{
// 			if (bmp[j] == 255)
// 			{
// 				for ( int k = 0; k < s.size(); k++ )
// 				{
// 					if (s[k] == values[j])
// 					{
// 						values[j] = min;
// 						break;
// 					}
// 				}
// 			}
			
// 		}
// 		v.pop_back();
// 	}
// 	std::set<int> re;
// 	for (j = 0; j < height*linebyte; j++)
// 	{
// 		re.insert(values[j]);
// 	}*/

// 	/*int label = 1;
// 	int *values = new int[height*width]{ 0 };
// 	std::vector<int> labelSet;
// 	labelSet.push_back(0);
// 	labelSet.push_back(1);
// 	for ( i = 0; i < height; i++)
// 	{
// 		for ( j = 0; j < width; j++)
// 		{
// 			if (bmp[i*linebyte + j] != 255)
// 				continue;
// 			int left = bmp[i*linebyte + j - 1];
// 			int up = bmp[(i - 1)*linebyte + j];
// 			int left_up = bmp[(i - 1)*linebyte + j - 1];
// 			int right_up = bmp[(i - 1)*linebyte + j + 1];
// 			int neighborLabels[4];
// 			int cnt = 0;
// 			if (left == 255)
// 				neighborLabels[cnt++] = values[i*linebyte + j - 1];
// 			if (up == 255)
// 				neighborLabels[cnt++] = values[(i - 1)*linebyte + j];
// 			if (left_up == 255)
// 				neighborLabels[cnt++] = values[(i - 1)*linebyte + j - 1];
// 			if (right_up == 255)
// 				neighborLabels[cnt++] = values[(i - 1)*linebyte + j + 1];
// 			if (!cnt)
// 			{
// 				labelSet.push_back(++label);
// 				labelSet[label] = label;
// 				values[i*linebyte + j] = label;
// 				continue;
// 			}
// 			int smallestLabel = neighborLabels[0];
// 			for (int k = 0; k < cnt; k++)
// 			{
// 				if (neighborLabels[k] < smallestLabel)
// 				{
// 					smallestLabel = neighborLabels[k];
// 				}
// 			}
// 			values[i*linebyte + j] = smallestLabel;

// 			for (int k = 0; k < cnt; k++)
// 			{
// 				int tempLabel = neighborLabels[k];
// 				int& oldSmallestLabel = labelSet[tempLabel];
// 				if (oldSmallestLabel > smallestLabel)
// 				{
// 					labelSet[oldSmallestLabel] = smallestLabel;
// 					oldSmallestLabel = smallestLabel;
// 				}
// 				else if (oldSmallestLabel < smallestLabel)
// 					labelSet[smallestLabel] = oldSmallestLabel;
// 			}
// 		}
// 	}

// 	for (size_t i = 2; i < labelSet.size(); i++)
// 	{
// 		int curLabel = labelSet[i];
// 		int prelabel = labelSet[curLabel];
// 		while (prelabel != curLabel)
// 		{
// 			curLabel = prelabel;
// 			prelabel = labelSet[prelabel];
// 		}
// 		labelSet[i] = curLabel;
// 	}
// 	for ( i = 0; i < height*width; i++)
// 	{
// 		if (values[i] != 0)
// 		{
// 			for ( j = 0;  j < labelSet.size();  j++)
// 			{
// 				if (values[i] == labelSet[j])
// 				{
// 					values[i] = labelSet[1];
// 					break;
// 				}
// 			}
// 		}
// 	}
// 	for ( i = 0; i < labelSet.size(); i++)
// 	{
// 		cout << labelSet[i] << endl;
// 	}
// 	for ( i = 0; i < height; i++)
// 	{
// 		for ( j = 0; j < width; j++)
// 		{
// 			if (values[i*linebyte + j] != 0)
// 			{
// 				cout << "x: " << j << ", y:" << i << ", values:" << values[i*linebyte + j] << endl;
// 			}
// 		}
// 	}*/

// 	std::set<int> re;
// 	for (j = 0; j < height*linebyte; j++)
// 	{
// 		re.insert(values[j]);
// 	}
// 	for ( i = 0; i < height*linebyte; i++)
// 	{
// 		if (values[i] == 0)
// 		{
// 			p[i] = bmp[i];
// 		}
// 		else
// 		{
// 			p[i] = values[i] * 20;
// 		}

// 	}
// 	return p;
// }

// unsigned char * outlineExtraction::extractOutline(unsigned char * bmp, int width, int height, int linebyte)
// {
// 	unsigned char * pBmpBuf = new unsigned char[height*linebyte]{ 0 };
// 	int x, y, count[2]{ 0 };
// 	for ( i = 0; i < height; i++)
// 	{
// 		for ( j = 0; j < width; j++)
// 		{
// 			count[0] = 0;
// 			count[1] = 0;
// 			for (int k = 0; k < 8; k++)
// 			{
// 				x = dir[k][0];
// 				y = dir[k][1];
// 				if (i + x < 0 || j + y<0 || i + x > width - 1 || j + y>height - 1) {
// 					pBmpBuf[i*linebyte + j] = 255;
// 					break;
// 				}
// 				if (bmp[(i + x)*linebyte + j + y] == 0)
// 					count[0]++;
// 				if (bmp[(i + x)*linebyte + j + y] == 255)
// 					count[1]++;
// 			}
// 			if (count[0] == 8 || count[1] == 8)
// 			{
// 				pBmpBuf[i*linebyte + j] = 255;
// 			}
// 			else
// 			{
// 				pBmpBuf[i*linebyte + j] = 0;
// 			}
// 		}
// 	}
// 	return pBmpBuf;
// }






unsigned char * outlineExtraction::regionMark(unsigned char * bmp, int width, int height, int linebyte)
{
	unsigned char * p = new unsigned char[height*linebyte];
	int label = 1;
	int *values = new int[height*width]{ 0 };
	std::vector<POINT> s;
	for ( i = 1; i < height - 1; i++)
	{
		for ( j = 1; j < width - 1; j++)
		{
			if (bmp[i*linebyte + j] == 255 && values[i*linebyte + j] == 0)
			{
				values[i*linebyte + j] = label;
				label++;
				POINT p;
				p.x = j;
				p.y = i;
				s.push_back(p);
				while (!s.empty())
				{

					POINT currPt = s.back();
					s.pop_back();
					origin.x = currPt.x;
					origin.y = currPt.y;
					for (i = 0; i < 8; i++)
					{
						p.x = currPt.x + dir[i][0];
						p.y = currPt.y + dir[i][1];
						if (p.x < 0 || p.y<0 || p.x > width - 1 || p.y>height - 1)
							continue;
						if (bmp[p.y * linebyte + p.x] == 255 && values[p.y * linebyte + p.x] == 0)
						{
							s.push_back(p);
							values[p.y * linebyte + p.x] = values[origin.y*linebyte + origin.x];
						}
					}
				}
			}
		}
	}
	/*int region = 1;
	int *values = new int[height*linebyte]{ 0 };
	std::vector<std::vector<int>> v;
	for ( i = height; i > 0; i--)
	{
		for ( j = 0; j < width; j++)
		{
			if (bmp[i*linebyte + j] == 255)
			{
				int cnt = 0;
				int value[4]{0};
				int left = bmp[i*linebyte + j - 1];
				int left_up = bmp[(i + 1)*linebyte + j - 1];
				int up = bmp[(i + 1)*linebyte + j];
				int right_up = bmp[(i + 1)*linebyte + j + 1];
				values[i*linebyte + j] = region;
				if (left == 255)
				{
					values[i*linebyte + j] = values[i*linebyte + j - 1];
					cnt++;
					value[0] = values[i*linebyte + j - 1];
				}
				if (left_up == 255)
				{
					values[i*linebyte + j] = values[(i + 1)*linebyte + j - 1];
					cnt++;
					value[1] = values[(i + 1)*linebyte + j - 1];
				}
				if (up == 255)
				{
					values[i*linebyte + j] = values[(i + 1)*linebyte + j];
					cnt++;
					value[2] = values[(i + 1)*linebyte + j];
				}
				if (right_up == 255)
				{
					values[i*linebyte + j] = values[(i + 1)*linebyte + j + 1];
					cnt++;
					value[3] = values[(i + 1)*linebyte + j + 1];
	
				}
				if (cnt > 1 )
				{
					std::vector<int> label;
					for (int k = 0; k < 4; k++)
					{
						if (value[k] != 0)
						{
							label.push_back(value[k]);
						}
					}
					v.push_back(label);
				}
				if (values[i*linebyte + j] == region)
					region++;
			}
			
		}
	}
	for ( i = 0; i < v.size(); i++)
	{
		std::vector<int> s = v.back();
		int min = 10000;
		for ( j = 0; j < s.size(); j++)
		{
			if (min > s[j])
			{
				min = s[j];
			}
		}
		for ( j = 0; j < height*linebyte; j++)
		{
			if (bmp[j] == 255)
			{
				for ( int k = 0; k < s.size(); k++ )
				{
					if (s[k] == values[j])
					{
						values[j] = min;
						break;
					}
				}
			}
			
		}
		v.pop_back();
	}
	std::set<int> re;
	for (j = 0; j < height*linebyte; j++)
	{
		re.insert(values[j]);
	}*/

	/*int label = 1;
	int *values = new int[height*width]{ 0 };
	std::vector<int> labelSet;
	labelSet.push_back(0);
	labelSet.push_back(1);
	for ( i = 0; i < height; i++)
	{
		for ( j = 0; j < width; j++)
		{
			if (bmp[i*linebyte + j] != 255)
				continue;
			int left = bmp[i*linebyte + j - 1];
			int up = bmp[(i - 1)*linebyte + j];
			int left_up = bmp[(i - 1)*linebyte + j - 1];
			int right_up = bmp[(i - 1)*linebyte + j + 1];
			int neighborLabels[4];
			int cnt = 0;
			if (left == 255)
				neighborLabels[cnt++] = values[i*linebyte + j - 1];
			if (up == 255)
				neighborLabels[cnt++] = values[(i - 1)*linebyte + j];
			if (left_up == 255)
				neighborLabels[cnt++] = values[(i - 1)*linebyte + j - 1];
			if (right_up == 255)
				neighborLabels[cnt++] = values[(i - 1)*linebyte + j + 1];
			if (!cnt)
			{
				labelSet.push_back(++label);
				labelSet[label] = label;
				values[i*linebyte + j] = label;
				continue;
			}
			int smallestLabel = neighborLabels[0];
			for (int k = 0; k < cnt; k++)
			{
				if (neighborLabels[k] < smallestLabel)
				{
					smallestLabel = neighborLabels[k];
				}
			}
			values[i*linebyte + j] = smallestLabel;

			for (int k = 0; k < cnt; k++)
			{
				int tempLabel = neighborLabels[k];
				int& oldSmallestLabel = labelSet[tempLabel];
				if (oldSmallestLabel > smallestLabel)
				{
					labelSet[oldSmallestLabel] = smallestLabel;
					oldSmallestLabel = smallestLabel;
				}
				else if (oldSmallestLabel < smallestLabel)
					labelSet[smallestLabel] = oldSmallestLabel;
			}
		}
	}

	for (size_t i = 2; i < labelSet.size(); i++)
	{
		int curLabel = labelSet[i];
		int prelabel = labelSet[curLabel];
		while (prelabel != curLabel)
		{
			curLabel = prelabel;
			prelabel = labelSet[prelabel];
		}
		labelSet[i] = curLabel;
	}
	for ( i = 0; i < height*width; i++)
	{
		if (values[i] != 0)
		{
			for ( j = 0;  j < labelSet.size();  j++)
			{
				if (values[i] == labelSet[j])
				{
					values[i] = labelSet[1];
					break;
				}
			}
		}
	}
	for ( i = 0; i < labelSet.size(); i++)
	{
		cout << labelSet[i] << endl;
	}
	for ( i = 0; i < height; i++)
	{
		for ( j = 0; j < width; j++)
		{
			if (values[i*linebyte + j] != 0)
			{
				cout << "x: " << j << ", y:" << i << ", values:" << values[i*linebyte + j] << endl;
			}
		}
	}*/

	std::set<int> re;
	for (j = 0; j < height*linebyte; j++)
	{
		re.insert(values[j]);
	}
	for ( i = 0; i < height*linebyte; i++)
	{
		if (values[i] == 0)
		{
			p[i] = bmp[i];
		}
		else
		{
			p[i] = values[i] * 20;
		}

	}
	return p;
}

unsigned char * outlineExtraction::extractOutline(unsigned char * bmp, int width, int height, int linebyte)
{
	unsigned char * pBmpBuf = new unsigned char[height*linebyte]{ 0 };
	int x, y, count[2]{ 0 };
	for ( i = 0; i < height; i++)
	{
		for ( j = 0; j < width; j++)
		{
			count[0] = 0;
			count[1] = 0;
			for (int k = 0; k < 8; k++)
			{
				x = dir[k][0];
				y = dir[k][1];
				if (i + x < 0 || j + y<0 || i + x > width - 1 || j + y>height - 1) {
					pBmpBuf[i*linebyte + j] = 255;
					break;
				}
				if (bmp[(i + x)*linebyte + j + y] == 0)
					count[0]++;
				if (bmp[(i + x)*linebyte + j + y] == 255)
					count[1]++;
			}
			if (count[0] == 8 || count[1] == 8)
			{
				pBmpBuf[i*linebyte + j] = 255;
			}
			else
			{
				pBmpBuf[i*linebyte + j] = 0;
			}
		}
	}
	return pBmpBuf;
}

